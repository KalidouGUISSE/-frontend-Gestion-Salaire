# Dockerfile multi-stage pour la production
# Stage 1: Build
FROM node:20-alpine AS builder

# Définir le répertoire de travail
WORKDIR /app

# Copier les fichiers de dépendances
COPY package*.json ./

# Installer les dépendances
RUN npm ci --only=production --silent

# Copier le code source
COPY . .

# Variables d'environnement pour le build
ARG VITE_API_URL
ARG VITE_APP_VERSION
ARG VITE_APP_ENVIRONMENT=production

ENV VITE_API_URL=$VITE_API_URL
ENV VITE_APP_VERSION=$VITE_APP_VERSION
ENV VITE_APP_ENVIRONMENT=$VITE_APP_ENVIRONMENT
ENV NODE_ENV=production

# Build de l'application
RUN npm run build:production

# Stage 2: Production
FROM nginx:alpine AS production

# Installer des outils utiles
RUN apk add --no-cache curl

# Copier la configuration Nginx
COPY nginx.conf /etc/nginx/nginx.conf

# Copier les fichiers buildés
COPY --from=builder /app/dist /usr/share/nginx/html

# Copier les fichiers PWA
COPY --from=builder /app/public/manifest.json /usr/share/nginx/html/
COPY --from=builder /app/public/sw.js /usr/share/nginx/html/
COPY --from=builder /app/public/offline.html /usr/share/nginx/html/

# Créer un utilisateur non-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Changer les permissions
RUN chown -R nextjs:nodejs /usr/share/nginx/html && \
    chown -R nextjs:nodejs /var/cache/nginx && \
    chown -R nextjs:nodejs /var/log/nginx && \
    chown -R nextjs:nodejs /etc/nginx/conf.d

# Créer les répertoires nécessaires
RUN touch /var/run/nginx.pid && \
    chown -R nextjs:nodejs /var/run/nginx.pid

# Utiliser l'utilisateur non-root
USER nextjs

# Exposer le port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Commande de démarrage
CMD ["nginx", "-g", "daemon off;"]